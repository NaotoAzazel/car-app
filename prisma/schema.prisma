generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RecordTypes {
  REPAIRING
  SERVICING
  TUNING
  BUYING
  INSURANCE
}

enum RecordTags {
  ENGINE_OIL_CHANGE
  OIL_FILTER_REPLACEMENT
  GEARBOX_OIL_CHANGE
  BRAKE_PADS_REPLACEMENT
  BRAKE_DISKS_REPLACEMENT
  ENGINE_AIR_FILTER_REPLACEMENT
  CABIN_FILTER_REPLACEMENT
  BALL_BEARINGS_REPLACEMENT
  FRONT_ARM_SILENT_BLOCKS_REPLACEMENT
  REAR_ARM_SILENT_BLOCKS_REPLACEMENT
  FRONT_SHOCK_ABSORBERS_REPLACEMENT
  REAR_SHOCK_ABSORBERS_REPLACEMENT
  SPARK_PLUGS_REPLACEMENT
  FUEL_FILTER_REPLACEMENT
  TIMING_BELT_REPLACEMENT
  ROLLERS_AND_PUMP_REPLACEMENT
  POWER_STEERING_FLUID_CHANGE
}

model Records {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  title            String
  mileage          Int
  /// [AdditionalSpends]
  additionalSpends Json

  recordType        RecordTypes?
  tags              RecordTags[]
  RecordsComponents RecordsComponents[]
}

model Components {
  id                Int                 @id @default(autoincrement())
  name              String
  isLiquid          Boolean             @default(false)
  cost              Int
  code              String
  RecordsComponents RecordsComponents[]
}

model RecordsComponents {
  recordId    Int
  componentId Int

  record    Records    @relation(fields: [recordId], references: [id])
  component Components @relation(fields: [componentId], references: [id])

  @@id([recordId, componentId])
}
